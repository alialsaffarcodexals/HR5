services:
  db:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payroll
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: ./apps/api
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env                   # use real env, not example
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      REPORTS_DIR: ${REPORTS_DIR}
      API_PORT: ${API_PORT}
      JWT_SECRET: ${JWT_SECRET}
      COMPANY_NAME: ${COMPANY_NAME}
      TIMEZONE: ${TIMEZONE}
    ports:
      - "4000:4000"
    volumes:
      - reports:/data/reports
    # use Node to run compiled app (NOT pnpm)
    command: ["node","dist/main.js"]
    # healthcheck via Node fetch (no curl needed)
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "fetch('http://localhost:4000/api/healthz').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    build: ./apps/api
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      REPORTS_DIR: ${REPORTS_DIR}
      API_PORT: ${API_PORT}
      JWT_SECRET: ${JWT_SECRET}
      COMPANY_NAME: ${COMPANY_NAME}
      TIMEZONE: ${TIMEZONE}
    volumes:
      - reports:/data/reports
    command: ["node","dist/worker.js"]

  web:
    build: ./apps/web
    depends_on:
      api:
        condition: service_started
    env_file: .env
    environment:
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      API_BASE_URL: ${API_BASE_URL:-http://api:4000}  # container-to-container
    ports:
      - "3000:3000"

  proxy:
    image: nginx:1.27
    depends_on:
      - api
      - web
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

volumes:
  db_data:
  redis_data:
  reports:
